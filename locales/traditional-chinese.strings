// Generic confirmation (Confirm? [yes/ok/delete, cancel])
confirm = "請確認是否操作？";
// Answer to a question (Are you sure you want to do that? [yes, cancel])
confirm.yes = "確認";
// The generic ok in a confirm box (The next operation is dangerous. [ok, cancel])
confirm.ok = "好";
// Cancel something after being asked (Question? [answer, cancel])
confirm.cancel = "取消";

// Name of an item (object, tool, etc)
item.name = "重新命名";
// Add a new item (object, tool, etc)
item.new = "建立";
// Rename an item (object, tool, etc)
item.rename = "重新命名";
// Add a new item (object, tool, project, etc)
item.add = "新增";
// Save an item (object, tool, etc)
item.save = "儲存";
item.save.confirm = "確認儲存 $0？";
// Reload last save of an item (object, tool, etc)
item.lastSave = "上次儲存";
// Reload last save of an item (object, tool, etc)
item.lastSave.confirm = "要載入上一次儲存的檔案嗎？";
// Reset an item to its initial value (object, tool, etc)
item.reset = "重置";
item.reset.confirm = "確認要重置嗎？";
// Make an item instance, similar to clone but keeps the underlying geometry (Synonym: link? soft clone?)
item.instance = "";
// Uninstance the object, make the object real
item.uninstance = "";
// Clone an item (object, tool, etc)
item.clone = "克隆";
// Delete an item (object, tool, etc)
item.delete = "刪除";
item.delete.confirm = "請確認是否刪除？";
item.delete.confirm.yes = "確認刪除";
// When we delete the item but the image is used somewhere
item.delete.imageUsed = "";
// Convert the item type (mesh, light) to a simple Node type
item.toNode = "";
// Item visibility (object, layer, etc)
item.visible = "";
// Show an item (object, layer, etc)
item.show = "";
// Hide an item (object, layer, etc)
item.hide = "";
// Select an item (object, layer, etc)
item.select = "";
// Unselect an item (object, layer, etc)
item.unselect = "";
// Merge an item with another one below (layer)
item.mergeDown = "向下合併";
// The order of an item in a list
item.order = "";
// Focus on previous item
item.previous = "";
// Focus on next item
item.next = "";
// The item is locked (either it cannot be selected, edited, or we preserve its details)
item.lock = "";

// Three-state toggle button (Auto, Off, On)
toggle.on = "";
// Three-state toggle button (Auto, Off, On)
toggle.off = "";
// Three-state toggle button (Auto, Off, On)
toggle.auto = "";

// When you launch the app and we need to reprocess some resource thumbnails
loading.reprocess = "正在載入資料，請等待... ($0/$1)

$2";
loading.reprocess.cancel = "";

// Color of an object
material.color = "顏色";
// Defines how blurry or sharp the reflection on a material is (opposite of glossiness)
material.roughness = "粗糙度";
// Defines how blurry or sharp the reflection on a material is (opposite of roughness)
material.glossiness = "";
// Whether the material is a metal or not
material.metalness = "金屬強度";
// How much light a surface will reflect
material.specular = "";
// Light that the surface can emit (glow)
material.emissive = "";
// Normal map (synonym: detail, bump)
material.normal = "";
// Ambient Occlusion (AO)
material.occlusion = "";
// Textures, basically images wrapped on models (synonym: Maps, Texture maps)
material.textures = "";

// Minify
about.minify = "全屏顯示";
about.minify.help = "在裝置支援的情況下，可以透過四指觸碰螢幕來開關全屏顯示";
// Turntable will rotate the whole scene on itself (as it if was on a turntable)
about.turntable = "旋轉展示";
// Make the entire scene turn around (speed of the animation)
about.turntableSpeed = "旋轉速度";
// Stuffs that I used to make the app
about.credits = "鳴謝";
// Link to open source projects that I used for the app
about.credits.openSource = "開源專案";
// Only translate the &
about.credits.arts = "MatCap與HDRI";
// Change languages of the app
about.languages = "多語言切換";
about.languages.help = "感謝B站 @奧利奧泡麵蓋 在Nomad早期的中文志願翻譯！

如您希望瞭解更多，請訪問 $0（英文）";
// Link to the App Website
about.website = "官方網站";
// Link to the App Forum
about.forum = "交流論壇";
// Link to the App Manual
about.manual = "使用指引";
// Link to the App Email
about.mail = "聯絡郵箱";
// Link to the App Twitter account
about.twitter = "Twitter";
// Link to the App Instagram account
about.instagram = "Instagram";
// Link to the App Facebook account
about.facebook = "Facebook";
// Link to the App Discord account
about.discord = "Discord";

// Error when an algorithm needs the object to have an hole (usually to fill it)
alert.hole.nothing = "該物件沒有孔洞！";
// Visibility of the object is off (but should be on)
alert.shape.notVisible = "當前物件不可見！";
// The user tried to trim an object but the selected region didn't touch the object
alert.trim.nothing = "未找到可裁切物件";
// The user tried to trim an object but the selected region completely encompassed the object
alert.trim.full = "物件不能完全裁切";
// In order to extract something, the mesh needs to have painted mask
alert.mask.noExtract = "未找到可提取物件";
// In order to split something, the mesh needs to have painted mask
alert.mask.noSplit = "未找到可分離物件";
// List of disabled features when View Mode is selected
alert.view.disabled = "一些功能將在瀏覽模式下禁用：";
// Primitive Widgets are small ui stuffs in the viewport that the user can interact with to modify an object
alert.view.disabled.widgetPrimitive = "編輯錨點";
// The object needs to have two parts disconnected
alert.separate.fail = "該物件只有一部分，所以無法分開";
// Remesh is when you create a new topology (mesh) on an object
alert.voxelRemesh.success = "網格重構成功！";
alert.voxelRemesh.empty = "網格重構失敗，因為結果並未產生面。";
// Should not happen or very rarely, input here is an object
alert.voxelRemesh.invalidInput = "輸入無效！";
// Helper popup to tell the users the object will cloned
alert.matrix.clone = "將複製此物件";
// Helper popup to tell the users the object will cloned
alert.matrix.instance = "";
// A pivot refers the gizmo 3d position
alert.gizmo.usePivot = "使用自定義座標原點";
// A pivot refers the gizmo 3d position
alert.gizmo.useAuto = "使用自動座標原點";
// A pivot refers the gizmo 3d position, this mode means we are moving the pivot
alert.gizmo.editPivot = "編輯座標原點模式";
// A pivot refers the gizmo 3d position
alert.gizmo.editObject = "編輯物件模式";
// See Glossary (DynTopo)
alert.dynamic.enable = "啟用動態網格";
// See Glossary (DynTopo)
alert.dynamic.disable = "關閉動態網格";
alert.colorPicker = "在物件上拖動手指選取一個顏色";
// Transform mode is when the user can move the reference (image in the background) with its two fingers
alert.backgroundTransform = "輕點即可退出背景變換";
// Edit the symmetry plane with the gizmo
alert.editSymmetry = "";
alert.view.reset = "重置檢視";
// Snap the view to the nearest aligned 90° angle
alert.view.snap = "切換檢視";
// Show the painted mask on the mesh
alert.mask.show = "顯示蒙版";
// Hide the painted mask on the mesh
alert.mask.hide = "隱藏蒙版";
// Selection refers to the objects that are currently selected
alert.selection.lock = "鎖定所選項";
// Selection refers to the objects that are currently selected
alert.selection.unlock = "解鎖所選項";
// Hide the objects that are not selected
alert.selection.isolate = "隔離所選項";
// Show the objects that are hidden
alert.selection.showAll = "顯示全部";
// Project quick saving
alert.quickSave = "正在自動儲存...";
// Painting on the object was hidden but the user did paint the object
alert.forceShowPainting.fill = "顯示圖層繪畫已開啟";
// Painting on the object was hidden but the user started to paint on the object
alert.forceShowPainting.tool = "顯示圖層繪畫已開啟";
// See Glossary (Multiresolution)
alert.multiresLost = "模型細分將會丟失！";
// The user is starting an operation that can lead to a crash
alert.range.warning = "過高的解析度將會佔用大量記憶體！";
// Autosave popup
alert.autoSave.auto = "將在 $0s 後自動儲存";
// The selected object doesn't have any layers
alert.needLayer = "當前工具僅在活動圖層上可用";
// The user decides to hide the painting on the objects
alert.paintingHidden = "繪畫已被隱藏，請在設定面板裡將其開啟。";
// The selected object doesn't have any layers
alert.noPartialWireframe = "開啟線框顯示時，區域性雕刻將被禁用。";
// The user has selected a tool that is more intuitive to use when the camera is in orthographic mode
alert.shapeOrthographic = "為了避免因透視檢視而產生的偏差，建議在相機設定裡切換到正交檢視。";
// Trial version has a limited number of undo
alert.state.trial = "這是試用版本，您無法再撤銷。";

background = "背景";
// A flat color will be displayed in the background of the scene
background.color = "顏色";
// The environment (HDRI) will be displayed in the background
background.environment = "環境";
background.blur = "模糊";
background.exposure = "曝光";

// Image that the artist uses as a reference
background.imageEnable = "參考影象";
// The image will be displayed in overlay (used as a reference by the artist)
background.imageOverlay = "物件不透明度";
// Opposite of transparency (Alpha)
background.imageAlpha = "背景不透明度";
background.imageReset = "重設";
background.imageTransform = "背景變換";
// X screen coordinate of the image reference
background.imageX = "X軸方向";
// Y screen coordinate of the image reference
background.imageY = "Y軸方向";
// Rotation of the reference image
background.imageRotation = "旋轉";
// Scale of the reference image
background.imageScale = "縮放";

// Camera (point of view in 3d)
camera = "相機";
// Copy the views
camera.updateView = "更新視角？";
// Add a new camera
camera.addView = "新增視角";
// Focus on the camera
camera.focus = "";
// Add on the camera camera
camera.focusOn = "正在觀察";
// Camera projection, Orthographic or Perspective
camera.projection = "檢視";
// Camera projection, Orthographic or Perspective
camera.projection.orthographic = "正交檢視";
// Camera projection, Orthographic or Perspective
camera.projection.perspective = "透視檢視";
// camera Vertical Field of View
camera.fov = "視場角";
// Camera Field of View hint
camera.focal = "35毫米等值焦距：$0mm";
// Rotation mode controls how the user will interact with the camera rotation
camera.rotation = "檢視旋轉";
// Camera interaction mode, 2 degrees of freedom (synonym: Orbit)
camera.rotation.orbit = "水平模式";
// Camera interaction mode, 3 degrees of freedom
camera.rotation.trackball = "旋轉模式";
camera.rotation.trackball.help = "在旋轉模式下，可使用雙指旋轉場景的水平面。";
// Camera interaction mode, 1st person view
camera.firstPerson = "";
// How sensitive the camera is (synonym: sensitivity)
camera.speed = "相機速度";
// Camera rotation sensitivity
camera.speed.rotation = "旋轉";
// Camera panning sensitivity
camera.speed.panning = "平移";
// Camera zooming sensitivity
camera.speed.zooming = "縮放";
// Reset camera position
camera.resetView = "重置檢視";
// Align the view (snap to nearest 90° angle)
camera.snapView = "固定檢視";
// Warning (camera is snapped and it switched to orthographic)
camera.snapOrthographic.warning = "";
// Switch to orthographic view when the view is snapped
camera.snapOrthographic = "";
camera.snapOrthographic.help = "";
// The Camera pivot is the point around which the camera rotates
camera.pivot = "檢視中心點";
// When we double tap on the object with the finger/stylus
camera.doubleTapMesh = "雙擊物件";
// When we double tap on the background with the finger/stylus
camera.doubleTapBackground = "雙擊背景";
// When we double tap on the background with the finger/stylus
camera.doubleTapBackgroundFocus.toggle = "";
// Focus on the selection
camera.doubleTapBackgroundFocus.selection = "";
// Focus on the entire scene
camera.doubleTapBackgroundFocus.scene = "";
// When double tapping with the finger/stylus, the camera pivot will be updated
camera.doubleTapPivot = "雙擊後改變";
camera.doubleTapPivot.help = "雙擊後改變座標檢視中心點。";
// Allow new pivot even when zooming outside the object surface
camera.airPivot = "";
camera.airPivot.help = "";
// Update the pivot when you start interacting with the camera
camera.autoPivot = "平移/縮放後改變";
camera.autoPivot.help = "雙指移動相機後，中心點會隨之移動。";
// Move the camera so that it focus on the intersection point
camera.doubleTapFocus = "聚焦";
camera.doubleTapFocus.help = "雙擊物體表面後檢視中心將移動至該點。";

// Toolbox context (when expanded), multiple objects are selected
context.multiselection = "";
// There is 0 nodes/items selected
context.noSelection = "";

// Curve type, presets lets the user chooses between predefined curves
curve.preset = "預設";
// Curve type, https://en.wikipedia.org/wiki/Centripetal_Catmull%E2%80%93Rom_spline
curve.catmull = "";
// Curve curve, https://en.wikipedia.org/wiki/Spline_(mathematics)
curve.spline = "樣條";
// Display the falloff curve in a symmetric way
curve.symmetric.help = "";

// set the desired FPS (frame per second, refresh rate)
debug.targetFPS = "";
debug.targetFPS.help = "";

// Debug option, the newly created primitives will contains texture coordinates (UVs)
debug.uvPrimitive = "保留基本體UV";
debug.uvPrimitive.warning = "啟用UV將會消耗更多運存
如您不需要UV請禁用以下選項。";
debug.uvPrimitive.help = "目前僅支援立方體和球體，將會在未來支援更多種類。";
// Debug option, Normalize means transforming the data so that it fits in [0-1] the range
debug.uvNormalize = "UV規整化";
debug.uvNormalize.help = "Nomad將會把UV規整到0-1的網格內。";
// Debug option, BFF stands for Boundary First Flattening (no need to translate)
debug.uvBFF = "啟用BFF UV";
debug.uvBFF.help = "使用BFF演算法來展平UV。

請注意，如果物件的拓撲網格與正方體或球體有很大差別的話，結果有可能會產生重疊。";
// Debug option, display an window with some debugging logs
debug.logs = "除錯日誌";
// Debug option, overrides the rendering to display the depth buffer
debug.heightmap = "高度圖";
// Debug options, graphical stuffs
debug.graphics = "顯示選項";
// Debug options, generate screenshots with size compatible with the iOS store
debug.thumbnails = "使用略縮圖";

// Empty list: there is no projects
file.project.empty = "您沒有儲存的專案";
// The current opened project has some unsaved changes
file.project.unsaved = "更改未儲存！";
// The user will loose its project's unsaved changes
file.project.loseUnsaved = "如不儲存，您的更改將會丟失！";
// Indicates to the user that the project thumbnail corresponds to the last manual save
file.project.lastManualSave = "上一次手動儲存的預覽";
// The user is starting a new project but he won't be able to open the current project (because of trial version)
file.project.trialNoOpen = "這是試用版本，您將無法重新開啟當前專案！";
// The user is trying to load a project but he can only reload the current opened project (because of trial version)
file.project.trialOnlyOpen = "這是試用版本，您只能開啟當前專案！";

file.project = "專案";
// Save current project (or overwrite if the project has already been saved once)
file.project.save = "儲存";
// E.g: Save "my_project"?
file.project.save.confirm = "確認儲存 $0？";
// Save to another project (either new one or overriding existing one)
file.project.saveAs = "另存為";
// E.g: Overwrite "my_other_project"?
file.project.saveAs.confirm = "確認覆蓋 $0？";
// Open a project
file.project.open = "開啟";
// E.g: Open "my_project"?
file.project.open.confirm = "將開啟選定的專案 $0？";
// Load another project and add/append all its data to the current scene
file.project.add = "新增";
// E;g: Add "my_other_project" to the scene?
file.project.add.confirm = "確認新增 $0 至當前專案？";
// Reset the scene and create a new project
file.project.new = "新建";
file.project.new.confirm = "確認新建場景？";
// Delete a project (not corresponding to the currently opened one)
file.project.delete.confirm = "確認刪除 $0？";
// Delete a project (corresponding to the currently opened one)
file.project.delete.confirmActive = "刪除 $0？

這是當前正開啟的專案！";

// Auto save section
file.project.autoSave = "自動儲存";
file.project.autoSave.confirm = "確定要關閉自動儲存嗎？";
file.project.autoSave.help = "每隔一段時間將您的專案另存為一個單獨的檔案。

這個自動儲存檔案可以在以下目錄找到：

$0";
// Interval in minutes in which the auto save popup will appear
file.project.autoSave.popup = "彈窗提醒";
// In minutes
file.project.autoSave.minutes = "自動儲存間隔";
// Delete the current autoSave data
file.project.autoSave.delete = "刪除自動儲存檔案";

// Load interface preference settings when opening a scene file
file.load.guiSettings = "載入專案GUI設定";
file.load.guiSettings.help = "當您開啟或匯入專案檔案時，同時載入專案中包含的GUI設定。";
// OBJ have "groups" and "objects", by default groups are ignored, use this option to consider groups as separate objects
file.load.objSplitByGroup = "保留 OBJ 頂點組";
file.load.objSplitByGroup.help = "啟用該選項後，Nomad 會將 OBJ 檔案的各個頂點組拆分為單獨的物件。";
// Merge all the object layers at when loading a file (deleting them in the process)
file.load.mergeLayers = "合併圖層";
// Ignore the textures present in the file to load
file.load.skipTextures = "忽略貼圖";
// Do not fiddle with the object topology when loading the file
file.load.keepTopology = "保留拓撲";
file.load.keepTopology.help = "如您不希望應用破壞匯入模型拓撲，請勾選此選項。

應用將不會：
- 重新排序頂點和麵
- 刪除重疊頂點和麵
- 移除未使用頂點";
// If the object has more vertices than this value, then we won't attemp to reverse (multiresolution) the object
file.load.reverseVertices = "";
file.load.reverseVertices.help = "";


// Configure imports option
file.importSettings = "";

// Import file section
file.import.title = "從外部匯入";
file.import.title.help = "支援匯入的格式：
- Wavefront (.obj)
- glTF 2.0 (.glb .gltf)
- STL (.stl)";
// The user imports a scene file that will replace the current scene
file.import.open = "匯入新檔案";
file.import.open.confirm = "確定匯入新檔案？";
// The user imports a scene file that will be added/appended the current scene
file.import.add = "新增到場景";
file.import.add.confirm = "確定新增新檔案？";

// Export scene file
file.export.title = "匯出";
file.export.title.help = "建議匯出 glTF 格式，因為它比其他格式支援更多屬性。";

// Export the current selected objects instead of the entire scene
file.onlySelection = "只匯出選擇部分";
file.onlySelection.help = "只匯出當前選擇物件，而不是所有場景。";
// Tries to generate quad (rectangle polygon) from triangles
file.convertToQuad = "轉換為四邊形網格";
file.convertToQuad.help = "透過將相鄰的三角形合併的方式，將模型網格轉換為四邊形。";

// Whether we include the textures in the exported file
file.export.texture = "匯出貼圖";
// Baking means transfering/converting 
file.export.texture.help = "此選項不會把Nomad裡繪製的頂點顏色烘焙到貼圖上。";
// Whether we include normals vector in the exported file
file.export.normal = "匯出法線";
file.export.normal.help = "如想在其他軟體上開啟該檔案，請勾選此選項。
該選項對本應用沒有影響。";

file.export.gltf = "匯出 glTF 2.0";
// Whether we include layers in the exported file (see glossary for layer)
file.export.gltf.layer = "匯出圖層";
file.export.gltf.layer.help = "將圖層匯出為可變體。這是來自官方的特性，能在更多軟體上使用。";
// Whether we include painting of layers in the exported file (see glossary for layer)
file.export.gltf.layerPaint = "匯出其他";
file.export.gltf.layerPaint.help = "將匯出圖層繪畫。其他軟體不會讀取該屬性。";
// Whether the exported layer will use the non-standard Nomad encoding (smaller size)
file.export.gltf.layerNomad = "";
file.export.gltf.layerNomad.help = "";
// Whether we include the vertex color in the exported file
file.export.gltf.color0 = "匯出顏色";
file.export.gltf.color0.help = "匯出的是頂點顏色。這是來自官方的特性，能在更多軟體上使用。";
// Whether we include the vertex roughness and vertex metalness in the exported file
file.export.gltf.color1 = "匯出PBR";
file.export.gltf.color1.help = "";

file.export.obj = "匯出 OBJ 格式";
file.export.obj.warning = "圖層、粗糙度、金屬強度、蒙版和繪畫圖層等其他屬性將會丟失。";
// Whether we include the vertex color in the exported file
file.export.obj.colorAppend = "匯出顏色";
file.export.obj.colorAppend.help = "給頂點新增顏色資訊。

只有部分3D軟體能夠識別。";

file.export.stl = "匯出 STL 格式";
file.export.stl.warning = "圖層、粗糙度、金屬強度、蒙版和繪畫圖層等其他屬性將會丟失。";
// Whether we include the vertex color in the exported file
file.export.stl.color = "匯出顏色";
file.export.stl.color.help = "只有部分3D軟體能夠識別。";
file.export.stl.ascii = "預設情況下，格式為二進位制。

您可以選擇匯出為文字格式（ASCII），但檔案會更大。";

// Advanced settings
settings.advanced = "高階設定";
// Means that all these options will be resetted when the app restarts
settings.notSaved = "這些選項不會在設定中儲存。";
settings.reset.title = "設定";
settings.reset.title.help = "";

// Reset preference settings button
settings.reset = "恢復預設設定";
settings.reset.confirm = "";

// Render a screenshot of the scene
file.render = "渲染";
// If we include the App Interface in the exported screenshot
file.render.showInterface = "顯示操作介面";
// Resolution ratio of the exported screenshot
file.render.renderRatio = "渲染解析度";
file.render.renderRatio.help = "當該值為1.0時，軟體渲染的影象解析度保持不變。

您可以在裝置因記憶體不足，無法渲染特定解析度時適當調整該值，透過降低畫面精細程度的方式來匯出圖片。";
// Desired size of the exported screenshot
file.render.size = "渲染尺寸";
// Desired size of the exported screenshot (custom vs predefined size)
file.render.size.custom = "自定";
// Screen resolution parameters for the export screenshot features
file.render.screenResolution = "螢幕尺寸";
// width of exported screenshot
file.render.width = "寬度";
// height of exported screenshot
file.render.height = "高度";
// export screenshot of the scene
file.render.export = "匯出為png";
file.render.warn = "您當前匯出的圖片尺寸較大（$0x$1)！

請確認檔案妥善儲存後再繼續匯出，否則程式可能會因運存佔用過高而閃退。";
// If true, then the exported screenshot will have transparency data in the image
file.render.transparent = "匯出透明背景";
file.render.transparent.help = "開啟此選項可以讓您更方便地把渲染圖匯入到平面軟體裡。

暫不支援部分透明物件匯出。";

// Disable this option to have per-tool pressure settings (instead of shared settings)
pressure.useGlobal = "使用全域性壓感設定";
pressure.useGlobal.help = "勾選後，所有工具都會使用相同的壓感引數。

如您希望給此工具單獨設定壓感引數，請取消勾選。";

// Pencil pressure
pressure.title = "壓感設定";
// Pencil/Stylus pressure will be ignored
pressure.noTool = "此工具不適用壓感設定。";
// The tool can support pressure but its selected stroke type will ignore it 
pressure.noGrab = "此工具會忽略壓感設定。";
// The stylus pressure will impact the tool radius (more pressure -> bigger radius)
pressure.radius = "半徑";
// The stylus pressure will impact the tool intensity (more pressure -> stronger intensity)
pressure.intensity = "強度";

// Customize whether finger and/or stylus can move the Camera
gesture.cameraInteraction = "相機移動";
// Customize whether finger and/or stylus can sculpt on object
gesture.sculptInteraction = "雕刻";
// Both the finger and the stylus can perform a certain action (move camera, sculpt, etc)
gesture.interaction.fingerAndStylus = "手指與觸控筆";
// Only the finger can perform a certain action (move camera, sculpt, etc)
gesture.interaction.finger = "手指";
// Only the stylus can perform a certain action (move camera, sculpt, etc)
gesture.interaction.stylus = "觸控筆";
// Disable the action
gesture.interaction.none = "";
// Allow the action for any inputs
gesture.interaction.any = "";

// long press to pick the color/material under the cursor
gesture.materialPicking = "";
gesture.materialPicking.help = ""

// Three fingers on screen
gesture.three.title = "";
// Drag 3 fingers horizontally on the canvas to rotate the environment, lights and MatCap
gesture.fingerLighting = "三指旋轉燈光";
// Canvas means the scene viewport (the entire screen but excluding the interface)
gesture.fingerLighting.help = "在螢幕上使用三指水平移動可使環境、燈光與材質捕捉旋轉。";
// Drag 3 fingers vertically to edit the tool radius
gesture.fingerRadius = "三指調節半徑";
// Canvas means the scene viewport (the entire screen but excluding the interface)
gesture.fingerRadius.help = "在螢幕上使用三指垂直移動可調節當前工具的畫筆半徑。";

// If this option is enabled, finger inputs on screen will use the smoothing tool
gesture.fingerSmooth = "將手指用於平滑";
gesture.fingerSmooth.help = "";
// If enabled, the pressure will be taken into account even if it's not coming from a recognized stylus
gesture.unknownPressure = "允許未識別的壓感";
gesture.unknownPressure.help = "當您的觸控筆壓感無法使用或者希望使用手指壓感時，請勾選此選項。";

// Action when we press an Android pencil button
gesture.pencilAction.android = "觸控筆按鈕";
// Action when we use the Pencil double Tap
gesture.pencilAction.ios = "雙擊Pencil";
gesture.pencilAction.ios.help = "僅支援Apple Pencil 第二代";
// Pencil button (or iOS pencil double tap) action: Nothing
gesture.pencilAction.none = "無";
// Pencil button (or iOS pencil double tap) action: flip adding/substracting sculpt matter setting
gesture.pencilAction.alt = "新增或減去";

// Enable Mask gesture by tapping once on the screen
gesture.mask.oneTap = "";
gesture.mask.oneTap.help = "";
// Hold the finger on screen to toggle between two tools: Mask and SelMask
gesture.mask.longPress = "";
// Hold the finger on screen to toggle between two tools: Mask and SelMask
gesture.mask.longPress.help = "";
// Indicator that the tool has been set as the new shortcut
gesture.mask.infoShortcut = "";

// Shortcuts to undo/redo
gesture.history = "快捷手勢";
gesture.history.help = "雙指輕點撤銷。

三指輕點重做。";

// Size rejection is when we try to ignore the palm of the hand when we interact with a tablet
gesture.palmRejection = "啟用忽略尺寸";
gesture.palmRejection.confirm = "如果您在雕刻時遇到問題，請務必關閉此選項！";
gesture.palmRejection.help = "如果手指與螢幕的接觸面積超過設定值，螢幕將忽略手指的本次操作。

部分裝置可能不支援此選項";
// Size in pixel for the palm rejection feature
gesture.palmRejection.size = "尺寸閾值";

// History, list of undo/redo
history = "歷史記錄";
// First "undo" state
history.root = "新建";
history.undoConfirm = "您確定要撤銷所有操作嗎？";
history.undoWarning = "如在此之後進行更改，將會覆蓋之前的所有操作。";
// Settings concerning the history stack of undo/redo
history.stack = "歷史記錄設定";
// Actions to include in the undo/redo stack
history.include = "";
// include lighting editing in the undo/redo
history.includeLights = "";
history.includeLights.help = "";
// include postProcess editing in the undo/redo
history.includePostProcess = "";
// include shading parameters (MatCap & HDRIs) editing in the undo/redo
history.includeShading = "";
// Can limit the stack of undo/redo size
history.limitSize = "歷史記錄限制 (Mb)";
history.limitSize.help = "歷史記錄的最大大小（以Mb為單位）。

歷史記錄狀態會隨著下一個操作記錄而改變。";
// Limit the number of undo in the history stack
history.limitStack = "歷史記錄步數";
history.limitStack.help = "程式可保留的最大運算元量。

歷史記錄狀態會隨著下一個操作記錄而改變。";
// Value where you define how many operations you can undo before it displays a warning
history.rangeProtect = "歷史記錄保護範圍";
history.rangeProtect.help = "如您在歷史記錄中做了大量操作，程式會在覆蓋操作之前提示您。";
// When enabled, each time the user undo an operation it will undo the camera position as well
history.restoreCamera = "恢復相機視角";
history.restoreCamera.help = "啟用該選項後您可以在撤銷或重做時同時恢復當時的相機視角。";
// Undo
history.undo = "撤銷";
// Redo
history.redo = "重做";
// Shown during undo
history.state.undo = "撤銷： $0";
// Shown during redo
history.state.redo = "重做： $0";
// Shown during undo/redo
history.state.symmetrySplit = "映象";
// Shown during undo/redo
history.state.voxelRemesh = "體素網格重構";
// Shown during undo/redo
history.state.surfaceRemesh = "表面網格重構";
// Shown during undo/redo
history.state.multiresLevel = "改變解析度";
// Shown during undo/redo
history.state.multiresToDynamic = "模型細分轉為動態網格";
// Shown during undo/redo (mesh type conversion)
history.state.meshDynamicToStatic = "動態網格轉為靜態網格";
// Shown during undo/redo (mesh type conversion)
history.state.meshStaticToDynamic = "靜態網格轉為動態網格";

// Interface customization
interface = "介面設定";

// UI customization: each row of the list will be bigger
interface.expandList = "展開圖示";
// UI customization: each row of the list will be bigger
interface.expandList.help = "可以讓選單裡的圖示排列間距放大。";

// Add shortcuts buttons to the bottom of the screen
interface.bottomButtons = "底部快捷方式";

// Interface option (main base color)
interface.colorBase = "底色";
// Interface option (accent widget color)
interface.colorSelect = "主色";
// Interface option (if the menus are transparent or opaque)
interface.panelTransparent = "面板透明度";
// Interface option (panel blurriness, if the menus are transparent)
interface.blurFactor = "模糊強度";
// Interface option (color of panels, if the menus are transparent)
interface.colorBaseTransparent = "面板顏色";

// Interface color style
interface.preset.title = "介面預設";
// Interface color style
interface.preset.legacy = "";
// Interface color style
interface.preset.orange = "";
// Interface color style (~red)
interface.preset.cardinal = "";
// Interface Color style (~pink)
interface.preset.mulberry = "";
// Interface color style
interface.preset.brown = "";
// Interface color style (~green)
interface.preset.emerald = "";
// Interface color style (~blue)
interface.preset.neon = "";
// Interface color style
interface.preset.violet = "";
// Interface color style
interface.preset.grey = "";
// Interface color style
interface.preset.black = "黑";
// Interface color style
interface.preset.white = "白";

// Reset interface settings
interface.resetAll = "重置介面設定";
interface.resetAll.confirm = "確定要重置介面嗎？";
// Interface option (main base color)
interface.iconSupport = "";
interface.iconSupport.help = "";
// Interface customization
interface.flipTop = "整體反轉";
// Interface customization
interface.flipBottom = "反轉底部圖示";
// Interface customization
interface.flipMiddle = "反轉中間圖示";
// Interface customization (preview material in the viewport when editing material color)
interface.materialPreview = "調整材質引數預覽";
// Interface customization
interface.materialPreview.help = "";
interface.toolbox.hide = "自動隱藏工具欄";
interface.toolboxHide.help = "如果您想隱藏工具欄，請勾選此選項。";
// Interface customization (the toolbox is a grid, we can adjust the column count)
interface.toolbox.maxColumn = "工具欄列數";
// Reset the tool's order in the toolbox
interface.toolbox.resetOrder = "重設";
// Scale the interface
interface.scale = "介面縮放";
// Spacing between widgets
interface.cursorStep = "垂直間距";
// Width of the interface panels
interface.panelWidth = "面板寬度";
// Size of fonts
interface.fontScale = "字型尺寸";
// Inset
interface.inset.title = "";
interface.inset.title.help = "";
interface.inset.left = "";
interface.inset.right = "";
interface.inset.bottom = "";
interface.inset.top = "";

// (see Glossary for Layer)
layer = "圖層";
// (see Glossary for Layer)
layers.lock = "";
// (see Glossary for Layer)
layers.lock.yes = "";
// (see Glossary for Layer)
layers.lock.warning = "";
// (see Glossary for Layer)
layers.addLayer = "新增圖層";
// (see Glossary for Layer)
layer.factors = "通道引數";
// (see Glossary for Layer)
layer.factor = "";
// (see Glossary for Layer)
layer.offset = "";
// (see Glossary for Layer)
layers.title = "圖層";
// (see Glossary for Layer)
layers.title.help = "圖層能夠記錄位置偏移和繪畫，這對於非線性工作流程來說非常有用。
例如，透過試驗不同的面部表情而不依賴於歷史記錄來撤消更改。

圖層是從上到下排序的，所以上方的圖層會遮蓋下方的圖層。

您可以使用橡皮工具來擦除當前圖層上的繪畫蒙版。";
layers.primitive = "基本體無法新增圖層。";
// When there is no layer selected (see Glossary for Layer)
layers.baseSelected = "無";

light = "光線";
// Intensity of light
light.intensity = "強度";
// Temperature in Kelvin (Alternative way to compute the color of the light)
light.temperature = "";
// The attachment of a light defines how it will move when the user moves the camera
light.attachment = "光照方向";
// The light will stay still even if the user moves the camera
light.attachment.fixed = "固定";
// The light will move along the camera
light.attachment.camera = "隨相機移動";
light.attachment.help = "- 固定
燈光方向不會改變。

- 隨相機移動
燈光方向隨著相機視角而改變。";
// Light type (directional, spot, point)
light.type = "型別";
// Directional light (synonym: sun light)
light.type.directional = "平行光";
// Spot light emits light in a single direction, restricted by a cone shape.
light.type.spot = "聚光燈";
// Point light emits lights everywhere (synonym: omni, omnidirectional)
light.type.point = "點光源";
// Cone angle for spot angles
light.spot.angle = "入射角";
// Softness of the spot light
light.spot.softness = "邊緣硬度";
// Position of the light
light.position = "";
// Enable or disable shadows for a light
light.shadow.cast = "顯示陰影";
// Point light only works with "screenspace" shadow type (not "shadow map")
light.shadow.pointTip = "";
light.shadow.type = "";
// https://en.wikipedia.org/wiki/Shadow_mapping
light.shadow.type.shadowMap = "";
// Shadows computed with only the information visible on screen
light.shadow.type.screenspace = "";
light.shadow.type.screenspace.help = "";
// Adjustment to fix artefacts
light.shadow.bias = "陰影偏差";
// How blurry the shadow is
light.shadow.softness = "";
// Contact shadows are more precise shadows on small distance (synonym: cavity shadows?)
light.contact = "";
light.contact.help = "";
// Thickness threshold for screen-space shadows (synonym: threshold, bias)
light.shadow.tolerance = "";
// Activated the light
light.visible = "可見性";
// Move the light in front of the camera (but keeps its inner orientation)
light.resetPosition = "重設位置";

// Object's material
material = "材質混合模式";
// See glossary
material.pbrRoughnessMetalness.warning = "粗糙度與金屬強度在當前渲染模式下不可用。";
// See glossary
material.pbrReflectance.warning = "";
// See glossary
material.pbrRefraction.warning = "折射效果僅在PBR渲染模式下可用。";
// See glossary
material.pbrSubsurface.warning = "";
// Value that says how much light will change direction when hitting the surface
material.ior = "折射率";
// an object-level value that overrides the painting of the mesh
material.paintingOverride = "表面效果";
// The roughness in the inside is turbidity
material.paintingOverride.help = "";
// Glossiness is simply the opposite of roughness
material.refractionSurfaceGlossiness = "光澤度";
material.refractionSurfaceGlossiness.help = "光澤度可以增強光線打在物體表面上的反射效果。

- 當光澤度為0時，物件表面的粗糙度將與材質相同。

- 當光澤度為1時，物件表面的光滑效果將達到最強。";
// Synonym: turbidity
material.refractionInteriorRoughness = "粗糙度";
material.refractionInteriorRoughness.help = "粗糙度可以增強光線透過物體後的散射效果。

- 當粗糙度為0時，物件內部的粗糙度將與材質相同。

- 當粗糙度為1時，物件內部的粗糙效果將達到最強。";
// Set the roughness of the object with a value of 0
material.paintGlossy = "漆面效果";
material.paintGlossy.help = "將物件表面材質的粗糙度變為0，從而呈現更銳利的折射效果。

該操作不會影響材質的顏色與金屬強度。";
// Simulate the light being absorbed when it travels through the volume.
material.absorptionEnable = "吸收效果";
material.absorptionEnable.help = "該效果能模擬光線穿過物體時被衰減的情況。

簡單來說，較薄的部分因為光傳播距離較短，會顯得更亮，較厚的部分會顯得更暗。

最終效果由網格形狀結構決定，僅使用網格厚度的近似值。";
material.absorptionFactor = "吸收係數";
// Depth means how far the light can travel under the surface
material.subsurfaceDepth = "";
// Enable translucency (same as subsurface but only affect lights that enter a solid and escape from the other side)
material.translucency = "";
material.translucency.help = "";
// Opacity factor, the opposite of transparency (synonym: Alpha)
material.opacity = "不透明度";
// Fully opaque material
material.type.opaque = "實心";
// See glossary
material.type.subsurface = "";
material.type.subsurface.help = "";
// Transparency mode, alpha blending
material.type.blending = "正常混合";
material.type.blending.help = "可透過調節不透明度的值，以實現不同程度的透明效果。

請注意，由於實時渲染的效能限制，當您的模型形狀過於複雜時，可能會出現明顯的視覺偽影。";
// Transparency mode
material.type.additive = "線性減淡";
material.type.additive.help = "可透過調節不透明度的值，以實現不同程度的透明效果。

在此模式下，黑色會變成透明，白色不透明。與正常混合相比，該模式下出現的偽影會變少，但會使物件變亮。";
// Transparency mode based on dithering
// https://en.wikipedia.org/wiki/Dither
material.type.dithering = "抖動";
material.type.dithering.help = "加入一些噪點使顏色過渡更為平滑。";
// Simulate glass-like material
material.type.refraction = "折射";
material.type.refraction.help = "此模式可用於模擬出玻璃材料的質感。

由於實時渲染的效能限制，軟體無法實現自折射和多層折射的效果。";
material.castShadows = "投射陰影";
material.receiveShadows = "接收陰影";
// Lights are ignored, the object will be displayed with color only
material.alwaysUnlit = "不受光顯示";
// Inverse the side of the object triangles
// https://en.wikipedia.org/wiki/Back-face_culling
material.flipCulling = "翻轉法線";
// How much light a surface will reflect (synonym: specular)
material.reflectance = "反射率";
material.reflectance.help = "該引數能夠控制非金屬材質的高光效果。

大多數情況下，建議將該引數保持為預設值 0.5，即對應 0.04 的基礎反射率。";

// Menu name
menu.files = "檔案";
// Menu name
menu.scene = "場景";
// Menu name
menu.multires = "多重網格";
// Menu name
menu.voxel = "體素";
// Menu name
menu.dynTopo = "動態網格";
// Menu name
menu.topology = "拓撲";
// Menu name
menu.primitive = "基本體";
// Menu name
menu.render = "渲染";
// Menu name
menu.material = "材質";
// Menu name
menu.postProcess = "後期處理";
// Menu name
menu.camera = "相機";
// Menu name
menu.background = "背景";
// Menu name
menu.tool = "工具";
// Menu name
menu.stroke = "筆刷設定";
// Menu name
menu.paint = "畫筆設定";
// Menu name
menu.symmetry = "對稱";
// Menu name (pencil pressure)
menu.pressure = "壓感";
// Menu name
menu.gesture = "防誤觸";
// Menu name
menu.layers = "圖層";
// Menu name
menu.settings = "顯示設定";
// Menu name
menu.interface = "介面設定";
// Menu name
menu.bindings = "";
// Menu name
menu.history = "歷史記錄";
// Menu name
menu.historySettings = "歷史記錄設定";
// Menu name
menu.about = "關於";
// Menu name
menu.debug = "除錯";

// Operation on the object (action)
mesh.action = "操作";
// If the object has holes, the algorithm will close them
mesh.holeClose = "封閉孔洞";
// Says how dense (number of triangles) the algorithm will use in order to fill holes
mesh.holeDetail = "解析度";
// If the mesh has disconnected parts, it will be split/separated into objects
mesh.separate = "分離物件";
// When converting the object to a triplanar primitive, some object features will be lost
mesh.triplanar.warning = "圖層、繪畫與模型細分將會丟失。";
// Resolution of the triplanar grid
mesh.triplanar.resolution = "解析度";
// Make the triplanar a regular cube (all 3 dimension equal)
mesh.triplanar.cubic = "強制轉換為立方體";
// Covnert an object to a triplanar primitive
mesh.triplanar.convert = "轉換";
// Static object means "static topology"
mesh.typeStatic = "靜態模型";
// See glossary
mesh.typeMultiresolution = "模型細分";
// Dynamic topology 
mesh.typeDynamic = "動態模型";

// Disable this option to have per-tool material settings (instead of shared settings)
paint.useGlobal = "應用全域性材料";
paint.useGlobal.help = "如勾選此選項，其他工具的材質也將會與所選材質相同。";
// The current tool will paint the object if this option is enabled
paint.usePainting = "啟用繪圖";
// Factor/Opacity of paint tool
paint.intensity = "畫筆強度";
// Apply the paint on the object
paint.paintAll = "全部上色";
paint.paintAll.help = "將當前材料應用到所選物件上。

蒙版區域與未勾選通道也會被應用。";
// Apply the paint on the object but ignore painting intensity (force full intensity)
paint.paintAllForce = "強制全部上色";
paint.strokePainting.title = "畫筆設定";
// Brush stroke texture
paint.texture.title = "貼圖繪製";
paint.texture.title.help = "將圖片作為繪畫的筆刷,在模型表面繪畫。

您可以在筆刷的形狀設定裡更改貼圖繪製的平鋪、縮放參數。";
paint.texture.warningEnable = "您需要先勾選選單頂部的“啟用繪圖”後才能使用貼圖繪製功能。";
paint.texture.warningIgnored = "當前工具無法使用貼圖繪製功能。";
// Whether the Brush Alpha will be used to module painting
paint.useAlpha = "使用筆刷形狀設定";
paint.useAlpha.help = "筆刷選單裡的“形狀”設定也會作用到貼圖繪製效果。";
// Whether the Brush Falloff will be used to module painting
paint.useFalloff = "使用筆刷衰減設定";
paint.useFalloff.help = "筆刷選單裡的“衰減”設定也會作用到貼圖繪製效果。";

// when the user choose a new item name (through iOS/Android virtual keyboard)
input.name = "修改名稱";
// when the user choose a new number value (through iOS/Android virtual keyboard)
input.number = "請輸入檔名";
// when the user choose a new color (through iOS/Android virtual keyboard)
input.hexcolor = "請輸入顏色程式碼";

// Post process effect
postprocess = "後期處理";
// Quality vs performance
postprocess.quality = "效果質量";
postprocess.quality.help = "該設定可提升部分效果的渲染質量，但可能會影響效能。";
// More samples means better quality but slower performance
postprocess.maxSamples = "最大采樣值";
// Full resolution (1:1 resolution) instead of half resolution
postprocess.fullResolution = "最大實時解析度";
// Number of frames that we accumulate (higher value means better quality)
postprocess.accumulateCount = "";
postprocess.accumulateCount.help = "";
// The value is a ratio (0.5 means half resolution 2 means twice the resolution)
postprocess.renderRatio = "實時渲染解析度";
postprocess.renderRatio.warning = "";
postprocess.renderRatio.help = "";
// Temporal Anti-Aliasing (no need to translate "TAA")
postprocess.taa = "時間性抗鋸齒（TAA）";
postprocess.taa.help = "TAA可減少相機移動時的閃爍，呈現出更加平滑的影象效果。";
// Screen-Space Reflection (no need to translate "SSR")
postprocess.ssr = "螢幕空間反射（SSR）";
postprocess.ssr.warning = "SSR僅在PBR渲染模式下有效。";
// Screen-Space Global Illumination (no need to translate "SSGI")
postprocess.ssgi = "";
// Thickness threshold for ssgi tracing algorithm (synonym: threshold, bias)
postprocess.ssgi.tolerance = "";
postprocess.ssgi.experimental = "";
postprocess.ssgi.warning = "";
// Screen-space ambient occlusion (SSAO)
// https://en.wikipedia.org/wiki/Ambient_occlusion
postprocess.ssao = "環境光遮蔽（AO）";
// How far the effect spreads
postprocess.ssao.radius = "半徑";
// How strong the effect is
postprocess.ssao.factor = "強度";
// Adjustment to fix artefacts
postprocess.ssao.bias = "擴張強度";
postprocess.ssao.bias.help = "模型表面曲率將會影響效果的強度。";
// Depth of Field (bokeh)
// https://en.wikipedia.org/wiki/Depth_of_field
postprocess.dof = "景深";
// The blur factor behind the focused point 
postprocess.dof.blurFar = "遠景模糊";
// The blur factor in front of the focused point 
postprocess.dof.blurNear = "近景模糊";
postprocess.dof.focusTip = "點選物件表面可以改變焦點。";
// Bloom (light bleeding)
// https://en.wikipedia.org/wiki/Bloom_(shader_effect)
postprocess.bloom = "泛光效果";
// Intensity of the effect
postprocess.bloom.intensity = "強度";
// How far the effect spreads
postprocess.bloom.radius = "半徑";
postprocess.bloom.radius.help = "此引數可調節泛光的寬度。";
// Luminosity threshold (below this value, no bloom is generated)
postprocess.bloom.threshold = "閾值";
postprocess.bloom.threshold.help = "泛光閾值能夠判斷泛光的光線強度。
閾值越高，空間裡越亮的物體才會產生泛光效果。";
// https://en.wikipedia.org/wiki/Tone_mapping
postprocess.tone = "色調對映";
postprocess.tone.exposure = "曝光";
postprocess.tone.contrast = "對比度";
postprocess.tone.saturation = "飽和度";
// No tonemapping operator is used
postprocess.tone.mapping.none = "無";
// A neutral tonemapping is used
postprocess.tone.mapping.neutral = "";
// Color curves
postprocess.curve = "曲線";
// Curve for pixel luminance
postprocess.curve.luminance = "亮度";
postprocess.curve.red = "紅";
postprocess.curve.green = "綠";
postprocess.curve.blue = "藍";
postprocess.curve.reset = "重設";
// Reset color grading curves
postprocess.curve.resetAll = "全部重設";
// https://en.wikipedia.org/wiki/Chromatic_aberration
postprocess.chromatic = "色彩偏移";
postprocess.chromatic.factor = "強度";
// Darking on the edges
postprocess.vignette = "暈影";
// How far the effect spreads
postprocess.vignette.size = "半徑";
// How sharp the edge of the effect is
postprocess.vignette.hardness = "硬度";
// Unblur the image (sharpening)
// https://en.wikipedia.org/wiki/Unsharp_masking
postprocess.sharpness = "銳化";
postprocess.sharpness.factor = "強度";
// Filmic Grain
// https://en.wikipedia.org/wiki/Film_grain
postprocess.grain = "噪點";
postprocess.grain.factor = "強度";
// Accentuate the edges of the model
postprocess.curvature = "曲率描邊";
// Color/Strength of concave curvature
postprocess.curvature.cavity = "縫隙顏色";
// Color/Strength of convex curvature
postprocess.curvature.bump = "凸起顏色";
// https://en.wikipedia.org/wiki/Pixel_art
postprocess.pixelArt = "";
// Override frame accumulation feature
postprocess.pixelArt.allowAccumulate = "";
// Simulate scanline rendering (horizonal line)
postprocess.scanline = "";
postprocess.scanline.factor = "";
// Spacing between lines
postprocess.scanline.spacing = "";

// Geometry Primitive (box, sphere, cylinder, etc)
primitive = "基本體";
primitive.box = "立方體";
primitive.sphereCube = "球體";
primitive.sphereUV = "UV球體";
primitive.icosahedron = "寶石";
primitive.cylinder = "圓柱";
primitive.cone = "圓錐";
primitive.torus = "圓環";
primitive.lathe = "車削";
primitive.tube = "圓管";
primitive.plane = "平面";
primitive.triplanar = "三向投影";
primitive.faceXYZ = "";
primitive.faceXYZ.help = "";
primitive.needValidate = "基本體需轉換為可編輯物件後才可雕刻。";

// If enabled, we can edit primitive inside the viewport
primitive.edit = "編輯";
primitive.edit.help = "可以在軟體介面直接修改基本體的引數。

如果您喜歡使用軸向變換或自由變換來調整基本體，可以禁用此功能。";

// Primitive configuration
primitive.mainConfig = "範圍";
// Interface section where we change the topology (number of triangles/polygons)
primitive.topology = "拓撲引數";
// Interface section where we change the geometry (shape of the primitive)
primitive.geometry = "幾何";

// Validating the primitive (then it can be sculpted)
primitive.validate = "轉換";
// Maximum number of faces of the primitives
primitive.maxFaces = "面數限制";
primitive.maxFaces.help = "該基本體可擁有的最大面數。

該引數只能在轉換為可編輯物件前修改。";
// Synonym: Flat subdivision
primitive.linear = "線性細分";
// Post as "subdivision that occurs after the primitive computation"
primitive.subdivision = "細分等級";

// Radius (of a sphere, torus, etc)
primitive.radius = "半徑";
// Size (of cube x dimension)
primitive.size = "尺寸";
primitive.sizeX = "尺寸 X";
primitive.sizeY = "尺寸 Y";
primitive.sizeZ = "尺寸 Z";
// Division only impacts the topology (synonym: resolution)
primitive.division = "分段數";
primitive.divisionX = "分段數 X";
primitive.divisionY = "分段數 Y";
primitive.divisionZ = "分段數 Z";
// Angle of torus, etc
primitive.angleX = "角度 X";
primitive.angleY = "角度 Y";
primitive.angleZ = "角度 Z";
// It means we try to keep regular sized quad (square) instead of highly distorted rectangule
primitive.constantDensity = "固定比例";
// Make sure the shape is perfectly spherical
primitive.projectOnSphere = "投影在球體上";
primitive.projectOnSphere.help = "將點分佈在一個完美的球體上。";

// triplanar
primitive.triplanar.title = "三向投影 - 設定";
primitive.triplanar.title.help = "三向投影是將原物件三個平面的投影重新組合起來填充體素網格，然後將其多邊形化。

您可以透過在三個投影上修改蒙版或移動滑塊的方式來改變幾何體。

建議您關閉對稱選項，否則可能會導致最終效果與您的預期不符。

您可以開啟遮罩面板中的“拓撲連線”選項來在繪製時影響其他平面。";
// Make sure the box is a regular cube (same 3 dimension)
primitive.triplanarSameSize = "固定比例（立方體）";
primitive.triplanarPolish = "羽化";
// Mask refers to the painted mask on the triplanar planes
primitive.triplanarResetMask = "重置蒙版";
// One side of a cube (the back plane)
primitive.isolate.back = "背面";
// One side of a cube (the right plane)
primitive.isolate.right = "右面";
// One side of a cube (the bottom plane)
primitive.isolate.bottom = "底面";
// Plane
primitive.planeSameSize = "固定比例（平面）";
// Make the plane a disk/ellipse instead of a rectangle
primitive.planeDisk = "";
// Box
primitive.boxRegular = "固定比例（立方體）";
// Distance to the snapping point
primitive.tubeSnapOffset = "吸附偏移";
primitive.tubeSnapOffset.help = "當偏移值為1.0時，偏移後的距離即為圓管半徑。";
// Radius of the tube (starting end-point of the tube)
primitive.tubeThicknessStart = "起始半徑";
// Radius of the tube (ending end-point of the tube)
primitive.tubeThicknessEnd = "結束半徑";
primitive.tubeTwist = "";
primitive.tubeTwistRotate = "";
primitive.tubeTwistRadius = "";
primitive.tubeTwistOffset = "";
primitive.tubeSnap = "吸附";
primitive.torusRadiusOuter = "外圈半徑";
primitive.torusRadiusInner = "內圈半徑";
primitive.torusAngle = "角度";
primitive.torusAngleOffset = "角度";
primitive.cylinderHeight = "高度";
primitive.coneRadius = "半徑";
primitive.coneHeight = "高度";
// Hole sub menu (cylinder, tube, etc)
primitive.hole = "孔洞";
// Make a hole in the primtive to make it hollow
primitive.hasHole = "新增孔洞";
// Make sure the two end-point of a primitive (cylinder, tube, etc) have the same size
primitive.radiusSync = "相同半徑";
primitive.radiusStart = "底面半徑";
primitive.radiusEnd = "頂面半徑";

// Import resource (Alpha, Textures, MatCaps, etc)
resource.import = "匯入";

scene.title = "場景";
scene.title.help = "當場景內有多個物件時，在複選框處上下滑動即可快速選擇多個物件。 ";
// The view will focus on the item when we click on it
scene.focus = "";
// Icon size in pixel (min/max)
scene.iconSize = "";
// Min size of icon
scene.iconSize.min = "";
// Max size of icon
scene.iconSize.max = "";
// display hierarchy lines (visibility helper)
scene.showHierarchy = "";
scene.showHierarchy.help = "";
scene.showHierarchyNomadPivot = "";
scene.showHierarchyNomadPivot.help = "";
// The view will focus on the item when we click on it
scene.syncVisible = "";
scene.syncVisible.help = "";
// Merge 2 objects without modifying the geometry or the topology
scene.join = "連線";
// Group the selected object with a new created Empty Node as a parent
scene.group = "";
// Mirror node type, a node that make many copies of its children (mirror symmetry)
scene.mirror = "";
// Curve node type, a node that make many copies of its children (along a curve)
scene.curve = "";
// Array node type, a node that make many copies of its children (grid repetition pattern)
scene.array = "";
// Radial node type, a node that make many copies of its children (radial symmetry)
scene.radial = "";
// Nodes that make many copies of its children (type of mirror/curve/array/radial)
scene.repeaters = "";
scene.repeaters.help = "";
// Validate button
scene.validateGroup = "";
// If we should join children
scene.validateGroup.joinChildren = "";
// Merge/weld 2 objects by recomputing all the topology and creating a new object
scene.mergeVoxel = "體素合併";
scene.voxelResolution = "解析度";
// The hidden objects will be "substracted" (the object will carve the other object)
scene.subtractionTip = "相減運算：隱藏減去物件後點擊體素合併。";
// If all the objects are hidden, only the parts where they intersect (collide) will be kep
scene.intersectionTip = "相交運算：隱藏所有相關模型後點擊體素合併。";

// Need at least to select one object
scene.noneButNeedAtLeastOne = "物件未選擇";
// Need to select one object only
scene.noneButNeedOne = "";
// Need to select one object only
scene.onlyOneObject = "您選擇了多個物件，無法修改圖層。";

// General scene display settings
settings.display.title = "顯示設定";
// Wireframe (show triangles and quad edges)
settings.wireframe = "物件網格";
// Display UV
settings.debugUV = "UV棋盤格";
settings.debugUV.help = "開啟此選項後，將會顯示物件的紋理貼圖座標（UV）。

預設展示棋盤貼圖，可用於判斷UV座標的分佈情況。

僅在UV存在時顯示。";
// If the object is opened (a simple plane for example), two sided means we'll be able to see if from the two sides of the planes
settings.twoSided = "雙面顯示";
settings.twoSided.help = "開啟雙面顯示可以讓您看到模型的“內面”。

所有的三角形或四邊形都朝向一個特定的方向，例如在基本球體上，所有的面都朝向外部。

如果您將相機移動到球體內部，這些面就是背面。";
// If we colorize the inverted side of faces
settings.backface.color = "內面顏色";
// Color of the inverted side of faces
settings.backface.colored = "內面著色";
// Outline (contour highlight around the selected object)
settings.outline = "輪廓";
// Outline (contour highlight around the selected object)
settings.outline.help = "被選物件輪廓";
settings.outline.thickness = "粗細";
// Navigation cube (easy to snap/align the view)
settings.snapCube = "方位檢視";
// Move the navigation cube to the bottom of the screen
settings.snapCube.bottom = "置於底部";
// Move the navigation cube on the left side of the screen
settings.snapCube.left = "置於左側";
// Stats (information logs about the scene displayed on screen)
settings.stats = "顯示場景狀態";
settings.stats.right = "置於右側";
settings.stats.all = "顯示全部";
// Grid
settings.grid = "世界網格";
// Cursor
settings.cursor.whileSculpting = "雕刻時顯示畫筆";
// A small indicator dot
settings.cursor.showDot = "顯示指標點";
settings.cursor.showDot.help = "指標點會在您移動相機和雕刻時顯示。";
settings.cursor.showRope = "顯示畫筆準星";
// Highlight (the object glows when we select it)
settings.highlight.selection = "";
// Highlight settings
settings.highlight = "";
settings.highlight.duration = "";
// Mesh that are not selected will be dark
settings.darkenUnselected = "變暗未選物件";
// https://en.wikipedia.org/wiki/Shading
settings.smoothShading = "平滑著色";
// Experimental feature
settings.partialDraw = "區域性雕刻";
settings.partialDraw.help = "功能未完善！

僅建議您在雕刻高精度細小模型時使用。

它能讓雕刻過程更加流暢，但不建議您開啟顯示物件網格。

啟用此功能可能會在使用畫筆時產生一些奇怪的東西。";
settings.partialDraw.warning = "如果顯示不正常，請不要忘記關閉此選項！";
// Disable this option to force a white uniform paint instead of showing the objects painting
settings.showPainting = "圖層繪畫";
// Display the light icons in the viewport
settings.lightIcon = "燈光圖示";
// Display the camera icons in the viewport
settings.cameraIcon = "";
// Show icon on the canvas
settings.icon = "";
// Show icons on the canvas
settings.icons = "";
// Tooltip
settings.icons.help = "";
// Hole filling settings
settings.hole = "填補孔洞";
// Allow the hole filling algorithm to handle non-manifold (non regular topology)
settings.hole.nonManifold = "填補非流形孔洞";
settings.hole.nonManifold.help = "應用將會嘗試填補非流形孔洞。

此選項不會被儲存在設定中。";
// Maximum number of vertices (points)
settings.multires.maxVertices = "最大頂點數量";
settings.multires.maxVertices.help = "應用在模型細分之前並不會檢查記憶體，多邊形數量過多很容易會導致應用崩潰。";
settings.multires.lowResVertices = "最低解析度閾值";
settings.multires.lowResVertices.help = "在您移動相機時，模型物件可能會以較低解析度顯示。

如您希望顯示更高的解析度，可以增加此值。";

// The main rendering mode
shading = "渲染模式";
// Main rendering mode (PBR stands for Physically Based Rendering)
shading.pbr = "PBR";
shading.pbr.help = "在此模式下，材質的光照資訊相對固定。

您可以在此模式下對材質的粗糙度與金屬度進行修改，更好地觀察當前材質的顯示效果。";
// Fast rendering mode for sculpting purpose (do not translate) 
shading.matcap = "材質捕捉";
shading.matcap.help = "該模式是將光照，材質等資訊都儲存在一張貼圖上。

該模式光照資訊相對固定，對模型干擾較小，適合用於雕塑時觀察模型。";
// Unlit rendering mode, it simply displays a solid/flat color
shading.unlit = "不受光";
shading.unlit.help = "該模式下模型只顯示純色，不受任何外界光照影響。";
// Helper rendering mode that display a (do not translate)
shading.id = "";
shading.id.help = "";
// Randomize colors
shading.id.randomize = "";
shading.textures = "使用貼圖";
shading.textures.help = "Nomad目前尚未支援建立或編輯貼圖。

但您可以匯入包含有貼圖的檔案。（大部分情況下都是能顯示的）

-- 支援的通道貼圖 --
透明貼圖：Lit、Matcap、Unlit
法線貼圖：Lit、Matcap
顏色貼圖：Lit、Unlit
自發光貼圖：Lit
粗糙度貼圖：Lit
金屬度貼圖：Lit";
// Lights
shading.lights = "燈光";
shading.lights.addLight = "新增燈光";
shading.lights.warning = "燈光選項在當前渲染模式下不可用。";
// Environment based lighting (synonym: HDRI)
shading.environment = "HDRI";
shading.environment.import = "匯入HDRI";
shading.environment.exposure = "曝光";
shading.environment.backgroundBlur = "背景模糊";
shading.environment.rotation = "旋轉";
shading.environment.rotation.help = "在螢幕上使用三指水平移動可使環境、燈光與材質捕捉旋轉。";
// The environment will always be aligned with the camera (so that the lighting is consistent)
shading.environment.attachedToCamera = "固定HDRI";
shading.environment.attachedToCamera.help = "啟用此選項後，移動相機時將不會移動HDRI。

這能讓光線保持固定，對於雕刻來說非常有用。";
shading.matcap.rotation = "旋轉";
shading.matcap.rotation.help = "在螢幕上使用三指水平移動可使環境、燈光與材質捕捉旋轉。";
shading.matcap.global = "使用全域性材質捕捉";
shading.matcap.global.help = "如果您希望在不同物件上使用不同的材質捕捉，請取消此選項。";

// bottom shortcut buttons (should be SHORT)
shortcut.maskVisible.short = "";
shortcut.maskVisible.long = "";
// bottom shortcut buttons (should be SHORT)
shortcut.solo.short = "";
shortcut.solo.long = "";
// bottom shortcut buttons (should be SHORT)
shortcut.voxelRemesh.short = "";
shortcut.voxelRemesh.long = "體素網格重構";
// bottom shortcut buttons (should be SHORT)
shortcut.wireframe.short = "";
shortcut.wireframe.long = "網格開關";
// bottom shortcut buttons (should be SHORT)
shortcut.cameraReset.short = "";
shortcut.cameraReset.long = "重置檢視";
// bottom shortcut buttons (should be SHORT)
shortcut.cameraSnap.short = "";
shortcut.cameraSnap.long = "切換檢視";
// bottom shortcut buttons (should be SHORT)
shortcut.lockSelection.short = "";
shortcut.lockSelection.long = "鎖定選擇";
shortcut.lockSelection.long.help = "啟用後，您無法透過點選方式選擇物件。";
// bottom shortcut buttons (should be SHORT)
shortcut.perspective.short = "";
shortcut.perspective.long = "透視檢視";
// bottom shortcut buttons (should be SHORT)
shortcut.grid.short = "";
shortcut.grid.long = "";
// bottom shortcut buttons (should be SHORT)
shortcut.uv.short = "";
shortcut.uv.long = "";

// Memory taken by the scene
stat.ramScene = "場景";
// Vram = Video RAM (Video Memory, the memory of the graphic card) 
stat.vramScene = "視訊記憶體場景";
// Vram = Video RAM (Video Memory, the memory of the graphic card) 
stat.vramRender = "視訊記憶體渲染";
// Vram = Video RAM (Video Memory, the memory of the graphic card) 
stat.vramTextures = "視訊記憶體貼圖";
// Memory taken by the undo/redo history
stat.ramHistory = "歷史";
// Memory taken by other stuffs
stat.ramOther = "其他";
// Memory used by the app (RAM, not storage!)
stat.usedMemory = "已用記憶體";
// Memory available for the app (RAM, not storage!)
stat.freeMemory = "剩餘記憶體";
// RAM, not storage!
stat.ram = "RAM";
stat.used = "已用：$0 MB";
stat.free = "剩餘：$0 MB";
stat.faces = "面數";
stat.triangles = "三角面";
stat.vertices = "頂點";
// quadrangular polygon (polygon with 4 sides)
stat.quads = "四邊形";
stat.sceneFaces = "場景面數";
stat.sceneVertices = "場景頂點數";

// Brush stroke
stroke = "筆刷";
// The brush radius is either screen-space (fixed size on the screen) or world-space (fixed size in the scene)
stroke.useWorldRadius = "恆定筆刷半徑";
// The settings is shared among every tools
stroke.useWorldRadius.help = "勾選後筆刷半徑將不會隨著檢視的縮放而改變。

此選項將會影響到所有工具。";
// Share the radius value among every tools.
stroke.useShareRadius = "相同筆刷半徑";
stroke.useShareRadius.help = "使所有工具的筆刷半徑相同。";
// When doing a brush stroke, the spacing is the distance between 2 sculpt operations
stroke.minSpacing = "筆刷間距";
// Adjust the brush intensity to ensure consistent deformation depending on the stroke spacing.
stroke.minSpacing.adjustIntensity = "調整間隔強度";
stroke.minSpacingAdjustIntensity.help = "調整筆刷強度，以保證根據筆畫間距產生一定的變化。";
stroke.minSpacing.help = "該選項可調節每個筆畫之間的距離，與筆畫半徑有一定的相關性。

將該值調低可使筆刷顯得更加順滑，但也會影響效能。";
// Brush stroke smoothing
stroke.lazySmooth = "平滑筆畫";
stroke.lazySmooth.help = "透過平均計算多個點來獲得更加平滑的筆畫。

將該值調高會使筆畫變得不跟手。";
// Make the brush stroke lags behind the pointer cursor
stroke.lazyRadius = "筆畫延後";
stroke.lazyRadius.help = "筆畫將會按一定的距離延後於指標位置。

此功能可用於繪製平滑線條。";
// It is not a per-tool settings
stroke.globalSettings = "這是一個全域性設定。";
// Start the brush stroke from the last sculpted position to ensure there is no discontinuity
stroke.snapRadius = "續接筆畫範圍";
stroke.snapRadius.help = "如果落筆處在最後一筆的續接範圍內，筆刷將會自動續接上。

此功能可用於繪製長線條，但需要頻繁停頓時。";
// offset between the cursor and the brush stroke (for fat finger on small screen)
stroke.sculptOffset = "筆刷偏移";
stroke.sculptOffset.help = "使筆刷持續偏移於觸控處

此功能適用於小螢幕裝置。在使用時，手指不會遮擋到螢幕。";
stroke.accumulate = "疊加筆畫";
stroke.accumulate.help = "如啟用此選項，則每個筆畫可新增或減去的數量將不會有限制。";
// The tool can use DynTopo
stroke.useDynamicTopology = "允許動態網格";
// Only sculpt the part that are linked topologically
stroke.connectedTopology = "連線拓撲";
stroke.connectedTopology.help = "啟用此選項後，畫筆將會只雕刻連線到所選表面的頂點。

此選項一般適用於移動工具, 例如專門移動與另一零件自相交的零件。 ";
// Only sculpt the vertex that points toward the camera
stroke.onlyFrontFace = "隻影響物件表面";
stroke.onlyFrontFace.help = "開啟此選項後，應用會忽略對“背面”的操作。

該功能可幫助您在不影響另一側的情況下在幾何平面上繪畫。

該選項也可用於雕刻，但您可能會遇到一些不便。";
// Only sculpt the vertex that points toward the direction of the deformation
stroke.onlySameSide = "只移動同向頂點";
stroke.onlySameSide.help = "在修改物件造型時，不移動朝向不同的頂點。";
// Module the intensity of the sculpting operation by using a falloff curve
stroke.curveFalloff = "衰減";
stroke.onlyLasso = "該設定僅對套索工具有效。";
// Alpha
stroke.alpha = "形狀";
// Invert the pixel (black <-> white)
stroke.alphaInvert = "形狀反相";
// Repeat the alpha image (pattern)
stroke.alphaWrap = "平鋪";
// No repeat pattern
stroke.alphaWrap.none = "無";
// Repeat the alpha in a regular manner (tiles with seams)
stroke.alphaWrap.repeat = "重複";
// Repeat the alpha in a mirrored (seamless tiling)
stroke.alphaWrap.mirror = "映象";
stroke.alphaProject = "平鋪模式";
// Project the alpha perpendicularly onto the surface 
stroke.alphaProject.surfaceContinuous = "表面連續";
// Project the alpha onto the surface in the direction of the camera view
stroke.alphaProject.screenFixed = "螢幕投影";
stroke.alphaRotation = "";
stroke.alphaRotation.lock.help = "";
// Repeat the image
stroke.alphaTiling = "形狀平鋪";
// Scale the image (make it bigger or smaller)
stroke.alphaScale = "形狀縮放";
stroke.alphaScale.help = "當該值最小時，畫筆形狀將不會大於工具畫筆的半徑圓。";
// Middle-point value at which no deformation occurs
stroke.alphaMidValue = "形狀強度";
stroke.alphaMidValue.help = "形狀強度可以讓您自由調節當前筆刷形狀所產生的效果。

當強度值為0時：
- 黑色：無變化
- 白色：凸起

當強度值為0.5時：
- 黑色：下凹
- 白色：凸起

當強度值為1時：
- 黑色：下凹
- 白色：無變化";
// Stroke type
stroke.strokeType = "筆刷型別";
// Sculpt and paint along the brush stroke at regular spacing
stroke.strokeTypeDot = "點";
// Sculpt continuously
stroke.strokeTypeDrag = "拖拽";
// Lock a region and move it around
stroke.strokeTypeGrab = "抓取";
// Lock a point of interest and sculpt it by changing the tool radius
stroke.strokeTypeGrabRadius = "抓取 - 可調半徑";
// Lock a region and sculpt it by changing the tool intensity
stroke.strokeTypeGrabIntensity = "抓取 - 可調強度";

// Symmetry
symmetry = "對稱";
symmetry.enable = "啟用對稱";
// Display a warning (the feature is only available for mesh object)
symmetry.primitiveWarning = "";
symmetry.plane.title = "對稱平面";
symmetry.toolIgnore = "當前工具不適用對稱。";
// Instead of planar symmetry, use a radial symmetry
symmetry.radial.title = "圓周對稱";
symmetry.radialX = "X";
symmetry.radialY = "Y";
symmetry.radialZ = "Z";
// Synonym: Offset
symmetry.offset.title = "";
symmetry.offsetX = "";
symmetry.offsetY = "";
symmetry.offsetZ = "";
// Number of clones
symmetry.count.title = "";
symmetry.countX = "";
symmetry.countY = "";
symmetry.countZ = "";
// method
symmetry.method = "對稱型別";
symmetry.method.help = "- 本體對稱
可使用軸向變換或自由變換等工具移動調整對稱平面。

- 世界對稱
對稱平面是固定不動的。";
// Local means: in the coordinate of the scene 
symmetry.methodWorld = "世界對稱";
// Local means: in the coordinate of the object (internal) 
symmetry.methodLocal = "本體對稱";
// Move the object to the other side of the symmetry (mirror it as well)
symmetry.flip = "翻轉模型";
// Mirror the mesh
symmetry.mirror = "映象";
symmetry.mirror.help = "嘗試在不影響拓撲的情況下重新應用對稱。

拓撲必須對稱且至少有一個邊緣恰好位於對稱平面上才能成功應用。

如果映象失敗，將會建議您強制對稱。但這樣會影響到拓撲。";
symmetry.mirrorLeftToRight = "從左至右";
symmetry.mirrorRightToLeft = "從右至左";
symmetry.mirrorFail = "對稱失敗：

是否使用映象來強制對稱？";
symmetry.mirrorUseMasking = "保護蒙版區域";
symmetry.mirrorUseMasking.help = "啟用後，在映象時將不會修改蒙版區域。

該選項會忽略非對稱網格。";
// Reset the symmetry plane position
symmetry.reset = "重設對稱中心";
// Reset the symmetry plane positon to the object center
symmetry.reset.centerMesh = "物件中心";
// Reset the symmetry plane positon to the scene (world) center
symmetry.reset.centerWorld = "世界中心";
// Reset the symmetry plane orientation
symmetry.reset.direction = "重設映象平面";
// Display a line on the object (to show where the symmetry lies)
symmetry.showLine = "顯示線條";
// Display the symmetry plane in 3d
symmetry.showPlane = "顯示平面";
// Allow the editing of the symmetry plane with the gizmo
symmetry.edit = "軸向變換";
symmetry.edit.warning = "編輯映象平面是實驗性功能。";
symmetry.edit.help = "您可以自由改變映象平面。

此功能並未完善，請儘量不要使用。";

// Ideally <10 chars
tool.dynTopo = "動態網格";
// Ideally <10 chars (Symmetry)
tool.symmetry = "對稱";
// Ideally <10 chars (Mirror primitive)
tool.mirror = "映象";
// Ideally <10 chars
tool.clay = "黏土";
// Ideally <10 chars (Subtract)
tool.clay.sub = "反向";
// Ideally <10 chars
tool.brush = "標準";
// Ideally <10 chars
tool.move = "移動";
// Ideally <10 chars (Normal vector, perpendicular to surface)
tool.move.normal = "法線方向";
// Ideally <10 chars
tool.drag = "拖拽";
// Ideally <10 chars (Smooth the surface by erasing the details)
tool.smooth = "平滑";
// Ideally <10 chars (Tries to smooth the topology by making the polygons more regular)
tool.smooth.relax = "規整網格";
// Ideally <10 chars (Paint mask)
tool.mask = "蒙版";
// Ideally <10 chars
tool.mask.unmask = "消除蒙版";
// Ideally <10 chars (Selector Mask, use lasso/ellipse,etc shape to mask the mesh)
tool.maskSelector = "選擇蒙版";
// Ideally <10 chars (Smudge the paint of the object)
tool.smudge = "塗抹";
// Ideally <10 chars (Flatten the surface)
tool.flatten = "剷平";
// Ideally <10 chars (Flatten the surface by offsetting the surface in the opposite direction)
tool.flatten.fill = "填充";
// Ideally <10 chars (Layer brush)
tool.layer = "層";
// Ideally <10 chars
tool.crease = "褶皺";
// Ideally <10 chars (Cut part of the mesh cleanly)
tool.trim = "裁切";
// Ideally <10 chars (Cut part of the mesh cleanly into two separate meshes)
tool.split = "分割";
// Ideally <10 chars (Project part of the object onto a curve)
tool.project = "投射";
// Ideally <10 chars
tool.inflate = "膨脹";
// Ideally <10 chars
tool.pinch = "擠捏";
// Ideally <10 chars
tool.nudge = "觸碰";
// Ideally <10 chars
tool.stamp = "圖章";
// Ideally <10 chars (Delete Layer, a tool that can cancel the Layer deformation/paint)
tool.clearLayer = "擦除";
// Ideally <10 chars (Select multiple objects with a lasso tool)
tool.select = "套索";
// Ideally <10 chars (Rotate, Translate and Scale the object)
tool.gizmo = "軸向變換";
// Ideally <10 chars (Automatic pivot)
tool.gizmo.auto = "自動原點";
// Ideally <10 chars (Custom pivot)
tool.gizmo.custom = "";
// Ideally <10 chars
tool.gizmo.editPivot = "編輯原點";
// Ideally <10 chars (Snap angle)
tool.gizmo.rotateSnap = "角度吸附";
// Ideally <10 chars (Snap translation)
tool.gizmo.moveSnap = "";
// Ideally <10 chars (Local space)
tool.gizmo.local = "軸向";
// Ideally <10 chars (Local space)
tool.gizmo.world = "";
// Ideally <10 chars (Rotate, Translate and Scale the object)
tool.transform = "自由變換";
// Ideally <10 chars (Translate the object)
tool.transform.move = "移動";
// Ideally <10 chars (Rotate the object)
tool.transform.rotate = "旋轉";
// Ideally <10 chars (Scale the object)
tool.transform.scale = "縮放";
// Ideally <10 chars (Snap the object on another object surface)
tool.transform.snap = "吸附中點";
// Ideally <10 chars (Measure distance between 2 points)
tool.measure = "測量";
// Ideally <10 chars (View tool, do nothing in particular)
tool.view = "瀏覽模式";
// Ideally <10 chars (Revolving surface along a line)
tool.lathe = "車削";
// Ideally <10 chars (Revolving surface along a curve)
tool.tube = "圓管";
// Ideally <10 chars (Insert object into the scene)
tool.insert = "基本體";
// Ideally <10 chars (Flip/Invert/Negate the shape)
tool.shape.flip = "翻轉";
// Ideally <10 chars (No shape selected, same as Camera mode, does nothing in particular)
tool.shape.view = "瀏覽";
// Ideally <10 chars (Lasso selection)
tool.shape.lasso = "套索";
// Ideally <10 chars (Curve selection, same as Lasso and it's an open shape)
tool.shape.curve = "曲線";
// Ideally <10 chars (Polygon selection, same as Lasso but with more precision)
tool.shape.polygon = "多邊形";
// Ideally <10 chars (Path selection, same as Lasso but with more precision and it's an open shape)
tool.shape.path = "路徑";
// Ideally <10 chars (Rectangular selection)
tool.shape.rectangle = "矩形";
// Ideally <10 chars (Ellipse selection)
tool.shape.ellipse = "橢圓";
// Ideally <10 chars (Line selection, split the screen in half)
tool.shape.line = "直線";
// Ideally <10 chars (Whether a shape is closed or not, a tube is open, a torus is closed)
tool.shape.closed = "閉合";

// Popup when editing the vertical sliders on the left
tool.slider.radius = "半徑 $0";
// Popup when editing the vertical sliders on the left
tool.slider.intensity = "強度 $0 %";

tool.settings = "設定";
tool.settings.none = "該工具無特殊設定。";

// Flatten distance offset
tool.clay.flattenOffset = "展平偏移 ";
tool.crease.pinchFactor = "力度";

tool.layer.removeInfluence = "使用圖層偏移";
tool.layer.removeInfluence.help = "";
tool.layer.noLayerSelected = "此選項僅在選擇圖層後可用。";

tool.flatten.warning = "以下均為實驗性功能，在之後版本可能會被移除。";
tool.flatten.planeLockOrigin = "";
tool.flatten.planeLockNormal = "";
tool.flatten.planeAverageOrigin = "";
tool.flatten.planeAverageNormal = "";
tool.flatten.planeOffset = "";

// Option for Tube, Lathe and Insert tool
tool.syncInstance = "";
tool.syncInstance.message = "";

// The vertex on the border of the mesh will stay still even if we try to smooth the border
tool.smooth.stickyBorder = "";

tool.paint = "繪畫";
// Erase the painting
tool.paint.erase = "橡皮";
// Only paint the part of the mesh above a certain height
tool.paint.depthFilter = "深度限定";
// Only paint the part of the mesh that was already painted in the layer (repainting)
tool.paint.layerFilter = "圖層限定";
tool.paint.layerFilter.help = "啟用該選項後，您只能夠在模型的最底圖層（base）上繪畫。";

// Clear the painted mask
tool.mask.clear = "清除";
// Invert the painted mask
tool.mask.invert = "反相";
// Mask or Unmask a region (leave other region that unconnected intact)
tool.mask.flipConnected = "";
// Blur the painted mask
tool.mask.blur = "模糊";
// Sharpen the edge of the painted mask area
tool.mask.sharpen = "銳化";
// The thickness of the extracted mesh (from the painted mask)
tool.mask.thickness = "抽殼厚度";
// Smooth the border of the extracted mesh (from the painted mask)
tool.mask.polish = "平滑邊界";
// Extract a new mesh from the painteed mask and carve/emboss the base mesh
tool.mask.engraveEmboss = "凹印";
// Extract a new mesh from the painted mask
tool.mask.extract = "抽殼";
// Extract two new mesh from the painted mask and from the unmasked area
tool.mask.split = "分離";
// How should we close the topology of the extracted object
tool.mask.closeMask = "分離操作（蒙版區域）：";
// How should we close the topology of the extracted object
tool.mask.closeUnmask = "分離操作（非蒙版區域）：";
// How should we close the topology of the extracted object
tool.mask.closeAction = "分離操作：";
// Do not close the mesh (leave it open)
tool.mask.closeActionNone = "無";
// Close the mesh with a hole-filling algorithm
tool.mask.closeActionFill = "填補";
// Close the mesh by adding a thickness on the surface
tool.mask.closeActionShell = "抽殼";
// Close the mesh by using the layer data as a difference thickness
tool.mask.closeActionLayer = "層";
tool.mask.closeAction.help = "- 無
僅分離蒙版區域，並且不封閉物件。

- 填補
孔洞會被填補並光滑。
不要在平面上使用。

- Shell
透過增加厚度的方式來封閉圖形。";

// Transform/Matrix
tool.matrix = "座標";
// The target of the transform is either the Matrix or the Vertex of the object
tool.matrix.apply = "";
// Automatic
tool.matrix.apply.auto = "自動選擇";
// Transform the object alone (the children stands still)
tool.matrix.apply.object = "基於物件";
// Auto apply the transform on the vertices
tool.matrix.apply.vertex = "基於頂點";
// Transform the object and its children
tool.matrix.apply.group = "";
tool.matrix.apply.help = "";
// Operation on the mesh
tool.matrix.action = "操作";
tool.matrix.action.help = "- 返回原點
將物件移回原位。

- 重設
重設物件的所有變換。

- 烘焙
重新記錄物件變換後的頂點座標。在視覺上什麼都不會改變。";
tool.matrix.translation = "位移";
tool.matrix.rotation = "旋轉";
tool.matrix.scale = "縮放";
tool.matrix.uniformScale = "等比縮放";
tool.matrix.uniformScale.help = "應用不支援非等比縮放的物件變換，因此將用頂點變換替代。";
tool.matrix.moveToOrigin = "返回原點";
tool.matrix.resetTransform = "重設";
// Synonym: Apply (transform)
tool.matrix.bakeTransform = "烘焙";

tool.transform.tip = "";

// Size of the gizmo
tool.gizmo.size = "部件尺寸";
// When enabled, tapping one the gizmo widget will open a numerical input popup
tool.gizmo.allowInput = "";
tool.gizmo.allowInput.help = "";
// Angle threshold
tool.gizmo.linearRollThreshold = "線性旋轉閾值";
tool.gizmo.linearRollThreshold.help = "此引數可影響模型旋轉時的“跟手程度”。

當旋轉角度超過設定值後，將會切換到圓形旋轉模式。

如果您更習慣以前的線性旋轉模式（切線方向），可以將角度設定為90°。";
// Partially hide/fade the gizmo when we interact with it
tool.gizmo.autoHide = "自動隱藏";
tool.gizmo.tap = "單擊改變檢視中心點";
tool.gizmo.tap.help = "此選項僅在自定義座標原點模式下有效（預設禁用）。

- 無
點選物件後無任何操作。

- 點選
僅在第一次點選物件時改變原點。

- 平均
將在圓點座標設定在前兩次點選直線的中點。";
tool.gizmo.tapNone = "無";
tool.gizmo.tapFirstHit = "點選";
tool.gizmo.tapMiddleStab = "中點";

// The lathe generator is a vertical line and cannot be rotated
tool.lathe.axisFixed = "固定位置";

// Fill the object's hole
tool.hole = "填補孔洞";
tool.hole.fillHoles = "填補孔洞";
// synonym: Alternative method
tool.hole.bridges = "真實裁切";
tool.hole.bridges.help = "啟用此選項後。您可以用裁切的方式在物體上打洞。
裁切效果也會更加接近於您所繪製的形狀。";
tool.hole.threshold = "填充閾值";
tool.hole.threshold.help = "調整該值以獲得更好的填充效果。";
tool.hole.smoothing = "平滑孔洞";

tool.smudge.quality = "質量";
tool.smudge.quality.help = "此選項可改變投影的解析度，將該值調低可提高筆刷速度。";

// Shape for the tools: Trim / Split / Project / SelMask
tool.shape = "形狀";
// Force the rectangle selection to be a square
tool.shape.rectangleSquare = "正方形";
// The selection rectangle will be centered around the cursor
tool.shape.rectangleCentered = "中心";
// Force the ellipse selection to be a circle
tool.shape.ellipseCircle = "圓形";
// The selection ellipse will be centered around the cursor
tool.shape.ellipseCentered = "中心";
// Rotate by step (angle value)
tool.shape.lineRotateStep = "旋轉角度";

// Show a yellow dot on the golden ratio point
tool.measure.goldenRatio = "顯示黃金分割比";

// Topology
topology = "拓撲";
// Synynom: detail value, density
topology.dynamic.detail = "細節等級";
// See glossary
topology.multires = "多重網格";
topology.multires.help = "此功能可保留物件的不同解析度。

您可以在低解析度對物體進行修改，之後在高解析度檢視並進一步更改細節效果。

圖層在不同解析度下都可用。";
// Synonym: Unsubdivide, Un-subdivide
topology.multires.reverse = "簡化";
topology.multires.reverse.confirm = "無法再進一步簡化模型。

當前物件的拓撲無法再進一步細分。";
topology.multires.subdivide = "細分";
topology.multires.subdivide.confirm = "該物件將會產生 $0M 個頂點，您確定要繼續嗎？";
// Prevents the user from subdivide the object again, a warning is displayed (with a UI link to increase this limit)
topology.multires.subdivide.limit = "";
topology.multires.deleteLower = "刪除低模";
topology.multires.deleteHigher = "刪除高模";
topology.multires.keepTriangles = "保留三角形";
// Synonym: Flat subdivision
topology.multires.linear = "平面細分";
topology.multires.linear.help = "直接細分網格，不應用平滑。";
// Create a new object by recomputing a new topology, by using voxels (see Glossary)
topology.voxel = "體素網格重構";
topology.voxel.help = "此功能可重構物件的網格，使其變得更加整齊。

如物件未封閉，則會先填充孔洞。

圖層在應用後會重新投影，但質量會受到影響。";
topology.voxel.resolution = "解析度";
topology.voxel.remesh = "重構";
topology.voxel.sharp = "保留硬邊";
topology.voxel.sharp.help = "該功能主要用於幾何構造比較簡單的物件。

可能會使重構結果造成一些失真。";
topology.voxel.subLevel = "多重網格等級";
topology.voxel.subLevel.help = "此功能可以從重構的結果中生成多個不同解析度的物件。

能夠在保留較低解析度物件的同時，擁有更快的執行速度。
如果重構解析度過高的話，可能會無法生成多重網格或者失去一些細節。";
// Dynamic topology (DynTopo)
topology.surface.remesh = "重構";
topology.surface.detail = "解析度";
topology.surface.detail.help = "不同於體素網格重構，表面網格重構不需要封閉物件。

此功能還支援遮罩，可以保護您不希望被更改拓撲的部分。

圖層不會受到影響。";
topology.surface.method = "模式";
// Uniformisation means we can both add and remove triangles/quads
topology.surface.method.uniformisation = "標準";
// We can only add triangles/quads (synonym: Refine)
topology.surface.method.subdivision = "細分";
// We can only remove triangles/quads (synonym: Simplify)
topology.surface.method.decimation = "簡化";
topology.surface.method.help = "不同模式的影響：
- 標準：智慧判斷
- 細分：增加細節
- 簡化：移除細節";
topology.surface.useMasking = "保護蒙版區域";
topology.surface.useMasking.help = "蒙版區域的拓撲將不會受到影響。";
topology.surface.extrapolate = "頂點擴張";
// DynTopo
topology.dynamic = "動態網格";
topology.dynamic.activate = "啟用";
topology.dynamic.activate.help = "啟用此功能可以讓您在雕刻過程中實時增刪網格。

開啟此功能可能會對效能產生較大影響。

圖層不會受到影響。";
topology.dynamic.method = "細節等級模式";
topology.dynamic.method.zoom = "視野";
topology.dynamic.method.radius = "半徑";
topology.dynamic.method.constant = "網格";
topology.dynamic.method.help = "- 視野
視野縮放程度決定拓撲的詳細程度。

- 半徑
筆刷半徑決定拓撲的詳細程度。

- Constant
細節等級決定拓撲的詳細程度。";
topology.dynamic.quality = "質量";
topology.dynamic.quality.help = "效能模式特性如下：
- 在雕刻前會對模型進行細分，可以減少您在雕刻過程中產生的偽像。
- 無法逐步應用細化功能，如果您雕刻非常小的細節或進行快速筆觸，則拓撲將始終正確進行細化。

如果您希望使用效能模式，可以考慮在設定面板中開啟“區域性雕刻”功能。";
topology.dynamic.quality.speed = "速度";
topology.dynamic.quality.quality = "效能";
// Whether the pencil pressure can impact the level of detail
topology.dynamic.usePressure = "同時使用壓感";
topology.dynamic.usePressure.help = "啟用此選項後，壓感也會對物件產生影響。";
// Decimate
topology.decimate.title = "成型簡化";
topology.decimate.title.help = "軟體將會減少模型面數，並把模型轉換為三角面。

此功能可以在保留模型儘可能多細節的同時，減少多邊形的數量。
僅建議在匯出為3D列印模型時使用！";
// Synonym: Simplify (Decimate reduce the number of triangles/quads while retaining details as much as possible)
topology.decimate = "網格最佳化";
topology.decimateTargetFaces = "目標面數";
topology.decimatePaintWeight = "繪畫權重";
topology.decimatePaintWeight.help = "此功能可以對繪畫的細節邊緣有所保護。

如果您想將模型用於3D列印，可以將該值設定為0。";
topology.decimateUniform = "網格均勻化";
topology.decimateUniform.help = "該引數值越高，最佳化輸出的三角面就越統一。";
// topology.decimatePreserveBorders = "Preserve borders";
// topology.decimatePreserveBorders.help = "Do not decimate the border of the mesh.";

// Unwrapping means compute UV (texture coordinates), it allows the object to receive on texture (wrap the texturing on the object)
topology.uv.title = "UV自動展開";
// UV Unwrapping
topology.uvAtlas = "展開UV";
// The operation can be very slow
topology.uvAtlas.warning = "可能需要等待很長時間。
僅限於頂點數小於100k的物件。";
// UV Unwrapping (BFF best left untranslated, stands for Boundary First Flattening)
topology.uvBFF = "BFF展開";
// Handles are topological holes (synonym: genus, hole)
topology.uvBFF.warning = "";
// Synonym: Point count? Singularity count ?
topology.uvBFFCones = "";
topology.uvBFFCones.help = "";
topology.uvDelete = "刪除UV";

// Transfer the vertex painting in the texture
topology.bake = "";
topology.bake.help = "";
topology.bakeResolution = "";

// Reset key-bindings/shortcuts
binding.reset = "";
// Same as Color Picker but it pick the material (color, roughness, metalness, etc)
binding.materialPicker = "";
// Edit the tool brush size/radius
binding.editRadius = "";
// Edit the tool brush size/radius
binding.editIntensity = "";
// Snap the camera
binding.viewFront = "";
// Snap the camera
binding.viewLeft = "";
// Snap the camera
binding.viewTop = "";
// Move/Translate the view
binding.panLeft = "";
// Move/Translate the view
binding.panRight = "";
// Move/Translate the view
binding.panForward = "";
// Move/Translate the view
binding.panBackward = "";
// Move/Translate the view
binding.panUp = "";
// Move/Translate the view
binding.panDown = "";
// Snap the view (while rotating)
binding.snapViewOnRotate = "";
// Open a Nomad internal project (replace current scene)
binding.project.open = "";
// Open a Nomad internal project (add it to the current scene)
binding.project.add = "";
// Import an external scene file (replace current scene)
binding.import.open = "";
// Import an external scene file (add it to the current scene)
binding.import.add = "";
// Select all the objects in the scene
binding.selectAll = "";
// Rotate environment and the lighting
binding.rotateLighting = "";

// Privacy policy
privacyPolicy.title = "未收集資料";
privacyPolicy.reject = "不好";
// Hexanomad is the company name
privacyPolicy = "Hexanomad 不會從 Nomad Sculpt 收集任何資料。";

// version trial
version.buyWeb = "該版本僅供演示";
version.buyFull = "購買完整版本";
version.restorePurchase = "恢復購買";

version.trialHistory = "試用版本限制：僅允許4次以內的撤銷或重做";
version.trialLayer = "試用版本限制：每個物體僅允許新增一個圖層";
version.trialOneProject = "試用版本限制：僅允許啟用一個專案";
version.trialNoImport = "試用版本限制：不允許匯入";
version.trialNoExport = "試用版本限制：不允許匯出";

version.fullFeatures = "購買完整版本後您可以：
- 撤消或重做不受限制
- 圖層數量不受限制
- 允許儲存和載入
- 可以匯入和匯出檔案";
